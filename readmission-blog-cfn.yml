---
AWSTemplateFormatVersion: '2010-09-09'
Description: S3 Bucket

Parameters: 
  s3BucketName: 
    Type: String
    Default: 'readmission-data-ehr'
  CFNDatabaseName:
    Type: String
    Default: 'ehr-db-readmission'
  CFNCrawlerName:
    Type: String
    Default: 'ehr-crawler-readmission'
  CFNDatabaseNameParquet:
    Type: String
    Default: 'ehr-dw-readmission'
  CFNDWCrawlerName:
    Type: String
    Default: 'ehr-dw-crawler-readmission'
  GlueManagedPolicy:
    Type: String  
    Default: 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
  SageMakerManagedPolicy:
    Type: String
    Default: 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
  CFNJobName:
    Type: String
    Default: glue-etl-convert-to-parquet
  CFNJobTrainDataName:
    Type: String
    Default: glue-etl-produce-traing-data
  AWSUser:
    Type: String
    Default: nujgup ##change this name
  SGNotebookName:
    Type: String
    Default: readmission-sg-notebook
  SGDefaultRepo:
    Type: String
    Default: 'https://github.com/anujag24/hospital-readmission-risk-prediction'



Resources:
  NonPHIDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", [ !Ref s3BucketName, !Ref 'AWS::AccountId'] ] 
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    DeletionPolicy: Delete

  NonPHIDataBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref NonPHIDataBucket
      PolicyDocument: 
        Version: '2012-10-17'
        Id: PutObjPolicy
        Statement:
        - Principal: "*"
          Effect: Deny
          Action: s3:PutObject
          Resource: !Sub '${NonPHIDataBucket.Arn}/*'
          Condition:
            StringNotEquals:
              's3:x-amz-server-side-encryption': 'aws:kms'
  CMSymmetricKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: 'Customer managed key to encrypt and decrypt data'
      Enabled: Yes
      EnableKeyRotation: Yes
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: 2012-10-17
        Id: encryption-key
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':user/'
                  - !Ref AWSUser
            Action:
                - "kms:Encrypt"
                - "kms:Decrypt"
                - "kms:ReEncrypt*"
                - "kms:GenerateDataKey*"
                - "kms:DescribeKey"
            Resource: '*'
  KeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Join [ "-", [ 'alias/', !Ref s3BucketName, !Ref 'AWS::AccountId', 'key'] ]
      TargetKeyId: !Ref CMSymmetricKey
  #Create IAM Role assumed by the crawler. For demonstration, this role is given all permissions.
  GlueServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref GlueManagedPolicy
      Policies:
        -
          PolicyName: "s3-access-glue"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:GetBucketAcl"
                  - "s3:DeleteObject"
                  - "s3:GetBucketLocation"
                Resource: !Sub ${NonPHIDataBucket.Arn}/*
        -
          PolicyName: "kms-key-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - "kms:Decrypt"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                  - "kms:GenerateDataKeyWithoutPlaintext"
                  - "kms:DescribeKey"
                Resource: !Sub ${CMSymmetricKey.Arn}
 # Create a database to contain tables created by the crawler
  CFNDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Join [ "-", [ !Ref CFNDatabaseName, !Ref 'AWS::AccountId'] ] 
        Description: "AWS Glue container to hold metadata tables for the crawler"
  # Create a database to contain tables created by the crawler
  CFNDatabaseParquet:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Join [ "-", [ !Ref CFNDatabaseNameParquet, !Ref 'AWS::AccountId'] ]  
        Description: "AWS Glue container to hold metadata tables for the crawler"
  GlueSecurityConfig:
    Type: AWS::Glue::SecurityConfiguration
    Properties: 
      EncryptionConfiguration: 
        S3Encryptions: 
          - 
            KmsKeyArn: !GetAtt CMSymmetricKey.Arn
            S3EncryptionMode: SSE-KMS
      Name: !Join [ "-", [ !Ref CFNCrawlerName, !Ref 'AWS::AccountId'] ]  
 #Create a crawler to crawl the data on a public S3 bucket
  CFNCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join [ "-", [ !Ref CFNCrawlerName, !Ref 'AWS::AccountId'] ]
      Role: !GetAtt GlueServiceRole.Arn
      #Classifiers: none, use the default classifier
      Description: AWS Glue crawler to crawl flights data
      #Schedule: none, use default run-on-demand
      CrawlerSecurityConfiguration: !Join [ "-", [ !Ref CFNCrawlerName, !Ref 'AWS::AccountId'] ] 
      DatabaseName: !Join [ "-", [ !Ref CFNDatabaseName, !Ref 'AWS::AccountId'] ]  
      Targets:
        S3Targets:
          # Public S3 bucket with the flights data
          - Path:
              !Join
                - '/'
                - - !Join [ "-", [ !Ref s3BucketName , !Ref 'AWS::AccountId'] ]
                  - 'raw-data'
      ##TablePrefix: !Ref CFNTablePrefixName
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Configuration: "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"},\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"
  #Create a crawler to crawl the data on a public S3 bucket
  CFNDWCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join [ "-", [ !Ref CFNDWCrawlerName, !Ref 'AWS::AccountId'] ] 
      Role: !GetAtt GlueServiceRole.Arn
      #Classifiers: none, use the default classifier
      Description: AWS Glue crawler to crawl flights data
      #Schedule: none, use default run-on-demand
      CrawlerSecurityConfiguration: !Join [ "-", [ !Ref CFNCrawlerName, !Ref 'AWS::AccountId'] ] 
      DatabaseName: !Join [ "-", [ !Ref CFNDatabaseNameParquet, !Ref 'AWS::AccountId'] ]  
      Targets:
        S3Targets:
          # Public S3 bucket with the flights data
          - Path:
              !Join
                - '/'
                - - !Join [ "-", [ !Ref s3BucketName , !Ref 'AWS::AccountId'] ]
                  - 'output-dir'
      ##TablePrefix: !Ref CFNTablePrefixName
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Configuration: "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"},\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"  

# Create job to run script which accesses scsv table and write to S3 file as parquet.
# The script already exists and is called by this job	
  CFNGlueJob:
    Type: AWS::Glue::Job   
    Properties:
      Role: !Ref GlueServiceRole  
      #DefaultArguments: JSON object 
      # If script written in Scala, then set DefaultArguments={'--job-language'; 'scala', '--class': 'your scala class'}
      #Connections:  No connection needed for S3 to S3 job 
      #  ConnectionsList  
      #MaxRetries: Double  
      Description: Job created with CloudFormation  
      GlueVersion: 1.0
      #LogUri: String  
      SecurityConfiguration: !Join [ "-", [ !Ref CFNCrawlerName, !Ref 'AWS::AccountId'] ] 
      Command:   
        Name: glueetl
        ScriptLocation: !Sub "s3://${s3BucketName}-${AWS::AccountId}/scripts/convert_to_parquet"
             # for access to directories use proper IAM role with permission to buckets and folders that begin with "aws-glue-"					 
             # script uses temp directory from job definition if required (temp directory not used S3 to S3)
             # script defines target for output as s3://aws-glue-target/sal    			 
      AllocatedCapacity: 5  
      ExecutionProperty:   
        MaxConcurrentRuns: 1  
      Name: !Ref CFNJobName
# Create job to run script which accesses scsv table and write to S3 file as parquet.
# The script already exists and is called by this job	
  CFNTrainDataGlueJob:
    Type: AWS::Glue::Job   
    Properties:
      Role: !Ref GlueServiceRole  
      #DefaultArguments: JSON object 
      # If script written in Scala, then set DefaultArguments={'--job-language'; 'scala', '--class': 'your scala class'}
      #Connections:  No connection needed for S3 to S3 job 
      #  ConnectionsList  
      #MaxRetries: Double  
      Description: Job created with CloudFormation  
      GlueVersion: 0.9 ## Spark ML container in Sagemaker supports MLeap based on Spark 2.2 so we need to build Spark ML model in Spark 2.2
      #LogUri: String  
      SecurityConfiguration: !Join [ "-", [ !Ref CFNCrawlerName, !Ref 'AWS::AccountId'] ] 
      Command:   
        Name: glueetl
        ScriptLocation: !Sub "s3://${s3BucketName}-${AWS::AccountId}/scripts/produce_training_data"
             # for access to directories use proper IAM role with permission to buckets and folders that begin with "aws-glue-"					 
             # script uses temp directory from job definition if required (temp directory not used S3 to S3)
             # script defines target for output as s3://aws-glue-target/sal    		
      DefaultArguments: ## We need extra jars files for Mleap serialization
          "--extra-py-files": !Sub "s3://${s3BucketName}-${AWS::AccountId}/scripts/python.zip"
          "--extra-jars": !Sub "s3://${s3BucketName}-${AWS::AccountId}/scripts/mleap_spark_assembly.jar"
          "--encryption-type": "sse-s3"
      AllocatedCapacity: 5  
      ExecutionProperty:   
        MaxConcurrentRuns: 1  
      Name: !Ref CFNJobTrainDataName
  SGNotebookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "sagemaker.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref SageMakerManagedPolicy
      Policies:
        -
          PolicyName: "s3-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:GetBucketAcl"
                  - "s3:DeleteObject"
                  - "s3:GetBucketLocation"
                Resource: !Sub ${NonPHIDataBucket.Arn}/*
        -
          PolicyName: "kms-key-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - "kms:Decrypt"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                  - "kms:GenerateDataKeyWithoutPlaintext"
                  - "kms:DescribeKey"
                Resource: !Sub ${CMSymmetricKey.Arn}
  CFVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
  CFSubNet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.0.0.0/24 ##check availability of this subnet
      VpcId: !Ref CFVPC
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId:
          Ref: CFVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  CFInternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: CFVPC
      InternetGatewayId:
        Ref: CFInternetGateway
  CFSageMaker: 
    Type: AWS::SageMaker::NotebookInstance
    UpdateReplacePolicy: Delete
    Properties: 
      DefaultCodeRepository: !Ref SGDefaultRepo
      DirectInternetAccess: Enabled ##Change this value
      InstanceType: ml.t3.xlarge
      KmsKeyId: !Sub ${CMSymmetricKey.Arn}
      NotebookInstanceName: !Ref SGNotebookName
      RoleArn: !GetAtt SGNotebookRole.Arn
      SubnetId: !Ref CFSubNet
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      RootAccess: Enabled ##Change this value - required to install additional packages
      VolumeSizeInGB: 30

Outputs:
  KMSKeyId:
    Description: KMS Key Id
    Value: !Ref CMSymmetricKey
  S3BucketName:
    Description: S3 Bucket Name
    Value: !Join [ "-", [ !Ref s3BucketName, !Ref 'AWS::AccountId'] ]  
  GlueServiceRole:
    Description: Glue Service Role Name
    Value: !Ref GlueServiceRole
  GlueCrawlerDB:
    Description: Glue Database with Raw Data
    Value: !Join [ "-", [ !Ref CFNDatabaseName, !Ref 'AWS::AccountId'] ] 
  